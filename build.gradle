/*
 * This build file was generated by the Gradle 'init' task.
 *
 * This generated file contains a commented-out sample Java project to get you started.
 * For more details take a look at the Java Quickstart chapter in the Gradle
 * user guide available at https://docs.gradle.org/current/userguide/tutorial_java_projects.html
 */
buildscript {
    ext {}

    repositories {
        //mavenLocal()
        jcenter()
        maven { url("https://plugins.gradle.org/m2/") }
    }
    dependencies {
        classpath ("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
        classpath ("io.spring.gradle:dependency-management-plugin:${dependencyManagementPluginVersion}")
        classpath ("com.diffplug.spotless:spotless-plugin-gradle:${spotlessPluginGradleVersion}")
        classpath ("com.netflix.nebula:gradle-lint-plugin:${gradleLintPluginVersion}")

        classpath ("org.sonarsource.scanner.gradle:sonarqube-gradle-plugin:${sonarqubeGradlePluginVersion}")
        classpath ("com.gradle:build-scan-plugin:1.10.2")
    }
}


//---------------------------------------------------------------------------//
plugins {
//    id "com.gradle.build-scan" version "1.9"

    // https://blog.jdriven.com/2017/01/spring-sweets-add-git-info-info-endpoint/
//    id "com.gorylenko.gradle-git-properties" version "1.4.17"
}

apply plugin: "com.gradle.build-scan"

//apply from: "${rootDir}/config/sonarqube-multiproject.gradle"
apply from: "${rootDir}/config/sonar.gradle"


//---------------------------------------------------------------------------//
allprojects {

    apply plugin: "java"
    apply plugin: "eclipse"
    apply plugin: "idea"

//    apply from: "${rootDir}/config/sonarqube-multiproject.gradle"
//    apply from: "${rootDir}/config/sonar.gradle"



    /**
     * https://docs.gradle.org/current/userguide/project_reports_plugin.html
     * taskReport
     * propertyReport
     * dependencyReport
     * htmlDependencyReport
     * --> projectReports
     */
    apply plugin: "project-report"

    check.dependsOn projectReport


    // Utils:
    apply from: "${rootDir}/config/utils.gradle"

    // Code Coverage:
    apply from: "${rootDir}/config/codecoverage.gradle"

    // https://github.com/kt3k/coveralls-gradle-plugin
//    apply plugin: "com.github.kt3k.coveralls"

    apply from: "${rootDir}/config/findbugs.gradle"

    // PMD:
    apply from: "${rootDir}/config/pmd.gradle"

    // CPD:
//    apply from: "${rootDir}/config/cpd.gradle"

    // CheckStyle:
    apply from: "${rootDir}/config/checkstyle.gradle"

    // lintGradle:
//    apply from: "${rootDir}/config/lint.gradle"


    repositories {
        //mavenLocal()
        jcenter()
        maven { url "https://plugins.gradle.org/m2/" }

        maven { url "https://repo.spring.io/milestone" }
        maven { url "https://repo.spring.io/libs-milestone" }

        maven { url "https://repo.spring.io/libs-snapshot" }
        maven { url "https://repo.spring.io/snapshot" }

    }

    /**
     * Gradle Wrapper can be run from root only
     * gradle wrapper
     */
    task wrapper(type: Wrapper) {
        gradleVersion = "${gradleVersion}"
    }



} // allprojects

//---------------------------------------------------------------------------//
subprojects {

    apply plugin: "io.spring.dependency-management"

//    apply from: "${rootDir}/config/sonarqube-multiproject.gradle"

    //-----------------------------------------------------------------------//
    dependencyManagement {
        imports {
            mavenBom("io.spring.platform:platform-bom:${springIoVersion}")
        }
    }

    /**
     * ResolutionStrategy to override a dependency globally
     * https://docs.gradle.org/current/dsl/org.gradle.api.artifacts.ResolutionStrategy.html#org.gradle.api.artifacts.ResolutionStrategy:force%28java.lang.Object[]%29
     */
    configurations.all {
        resolutionStrategy.force "com.google.guava:guava:${guavaVersion}", "net.sourceforge.htmlunit:htmlunit:latest.release"
    }


    /**
     * To view dependency tree in gradle:
     *
     * ./gradlew dependencies
     */
    dependencies {

        //-----------------------------------------------------------------------//
        compile ("org.aspectj:aspectjweaver")


        //-----------------------------------------------------------------------//
        // In-memory database
        compile ("com.h2database:h2")
        // Used for Swing GUI client
//        runtime ("org.hsqldb:hsqldb")

        //-----------------------------------------------------------------------//
        // Testing:
        testCompile "junit:junit"
        testCompile "org.hamcrest:hamcrest-all"
        testCompile "org.assertj:assertj-core"

        //-----------------------------------------------------------------------//
        // Selenium / WebDriver
        testCompile ("org.seleniumhq.selenium:selenium-api")
        testCompile ("org.seleniumhq.selenium:selenium-chrome-driver")
        testCompile ("org.seleniumhq.selenium:selenium-firefox-driver")

        testCompile ("org.seleniumhq.selenium:selenium-support")

        testCompile ("org.seleniumhq.selenium:selenium-java", {
            exclude group: "net.sourceforge.htmlunit", module: "htmlunit"
        })

        testCompile ("net.sourceforge.htmlunit:htmlunit:latest.release")
        // net.sourceforge.htmlunit:htmlunit:2.9

        // This has been dormant since 2016:
//        testCompile ("org.seleniumhq.selenium:selenium-htmlunit-driver:2.52.0")

        // https://mvnrepository.com/artifact/org.seleniumhq.selenium/htmlunit-driver
//        testCompile ("org.seleniumhq.selenium:htmlunit-driver:2.28")


        //-----------------------------------------------------------------------//
        // Additional Thymeleaf dependencies
        compile "org.thymeleaf:thymeleaf"
        compile "org.thymeleaf:thymeleaf-spring4"

        compile ("org.thymeleaf.extras:thymeleaf-extras-conditionalcomments")
        compile ("org.thymeleaf.extras:thymeleaf-extras-java8time")
        compile ("org.thymeleaf.extras:thymeleaf-extras-springsecurity4")
        compile ("nz.net.ultraq.thymeleaf:thymeleaf-layout-dialect")

        //-----------------------------------------------------------------------//
        // Utils:
        compile ("org.yaml:snakeyaml")
        compile ("org.apache.commons:commons-lang3")
        // Prefer Java8 time instead of Joda Time:
//        compile ("joda-time:joda-time")
        //compile("com.google.guava:guava:${guavaVersion}")
//        compile ("io.logz.log4j2:logzio-log4j2-appender:1.0.5")

        compile ("io.logz.logback:logzio-logback-appender:1.0.11")
        compile ("ch.qos.logback:logback-classic")
        compile ("org.slf4j:jul-to-slf4j")
        compile ("org.slf4j:log4j-over-slf4j")

        //-----------------------------------------------------------------------//
        //-- WebJars:
        // @see http://www.webjars.org/documentation#springmvc
        compile ("org.webjars:bootstrap:${webjarsBootstrapVersion}")
        compile ("org.webjars:jquery:${webjarsJqueryVersion}")
        compile ("org.webjars:webjars-locator:${webjarsLocatorVersion}")
        compile ("org.webjars:requirejs:${webjarsRequireJsVersion}")


        // JSON Support
        runtime ("com.fasterxml.jackson.core:jackson-databind")

        //-----------------------------------------------------------------------//
    } // dependencies


    /**
     * Speed up the build process to create a jar quickly:
     * gradle test -Pfast
     * gradle check -Pfast
     *
     * Instead of omitting each one:
     * <pre>gradle build -x checkstyle -x pmd -x findbugs -x test</pre>
     *
     * TODO: Revisit:
     * project.tasks["sonarqube"].dependsOn "anotherTask"
     */
    if (project.hasProperty("fast")) {
        gradle.startParameter.excludedTaskNames += ["checkstyleMain",
                                                    "checkstyleTest",
                                                    "pmd",
                                                    "pmdReport",
                                                    "pmdMain",
                                                    "pmdTest",
                                                    "findbugsMain",
                                                    "findbugsTest",
                                                    "findbugsReport",
                                                    "projectReport"]
    }


    //-----------------------------------------------------------------------//
    // Testing Configuration:

    /**
     * Now a Jenkins job can use:
     * gradle -PignoreTestFailures=true test
     * and not fail the build base on unit test failure.
     */
    if (!ext.has("ignoreTestFailures")) {
        ext.ignoreTestFailures = false
    }

    test {
        ignoreFailures = project.ext.ignoreTestFailures
        //maxParallelForks = Runtime.runtime.availableProcessors().intdiv(2) ?: 1
        maxParallelForks = Runtime.runtime.availableProcessors()
        forkEvery = 100
//        debug = true

        testLogging {
            showCauses true
            showExceptions true
            showStackTraces true

            events "failed"
            exceptionFormat "full"
        }

        reports.html.enabled = true
        reports.junitXml.enabled = true
    }

    tasks.withType(Test) {
        testLogging {
            showCauses true
            showExceptions true
            showStackTraces true

            exceptionFormat "full"
            events "started", "skipped", "passed", "failed"
            showStandardStreams = true
        }
    }

    /**
     * https://guides.gradle.org/performance/
     */
    tasks.withType(JavaCompile) {
        options.incremental = true
        options.fork = true
    }

    jar {
        baseName = "${rootProject.name}"
        version =  "${project.version}"
        manifest {
            attributes(
                    "Main-Class": "com.packtpub.springsecurity.CalendarApplication"
            )
        }
    }

/*
    clean {
        print "-------------------------------------------------\n"
        print "***** ${rootProject.rootDir} ********************\n"
        print "***** ${rootProject.buildDir} ********************\n"
        print "***** ${buildDir} ********************\n"
//        delete rootProject.buildDir
    }
*/




} // subprojects
//---------------------------------------------------------------------------//

/**
 * https://docs.gradle.org/current/userguide/eclipse_plugin.html
 *
 * To create eclispe workspace:
 * ./gradlew eclipse
 *
 * To remove all workspace files:
 * ./gradlew cleanEclipse
 */
eclipse {
    classpath {
        downloadSources = true
        downloadJavadoc = true
    }
}

/**
 * Gradle Plugin:
 * https://docs.gradle.org/current/userguide/idea_plugin.html
 *
 * https://docs.gradle.org/current/dsl/org.gradle.plugins.ide.idea.model.IdeaModule.html
 *
 */
//    apply plugin: "idea"
// Due to Gradle 4.x changes (separate output directories per JVM language)
// Idea developers refuse to reuse Gradle classpath and use own "out/" directory.
// Revert to old behavior to allow Spring Devtool to work with using fast Idea compiler.
// https://youtrack.jetbrains.com/issue/IDEA-175172
// Alternatively use native Gradle builds or bootRun.addResources = true
// To use this feature push Ctrl+Shift+F9 to recompile!
// Be aware that Idea put resources into classes/ directory!!
//    idea.module.inheritOutputDirs = false
//    idea.module.outputDir = sourceSets.main.output.classesDir
//    idea.module.testOutputDir = sourceSets.test.output.classesDir

// TODO: Need to alter cleanIdea to remove *.iws files too
idea {
    module {
        downloadJavadoc = true
        downloadSources = true
        outputDir file("build/classes/main")
        testOutputDir file("build/classes/test")
    }
}
/*idea.doLast{
    // Need to move
    // cp ./config/idea/runConfigurations ./.idea
}*/

/**
 * TODO: Add ./out to the clean
 * Not sure about sub modules. Maybe this needs to be in the allprojects
 * section...?
 */
/*
task clean(type: Delete) {
    delete rootProject.buildDir
}
*/

/*clean {
    print "***** ${rootProject.rootDir} ********************\n"
    print "***** ${rootProject.buildDir} ********************\n"
    print "***** ${rootDir} ********************\n"
    print "***** ${buildDir} ********************\n"
    delete rootProject.buildDir
}*/

/**
 * Gradle Wrapper can be run from root only
 * gradle wrapper
 */
/*task wrapper(type: Wrapper) {
    gradleVersion = "${gradleVersion}"
}*/


//---------------------------------------------------------------------------//

/**
 * Build Scanning
 * https://docs.gradle.com/build-scan-plugin/
 * https://plugins.gradle.org/plugin/com.gradle.build-scan
 *
 * To run:
 * ./gradlew check -Dscan
 *
 * To publish PREVIOUS build results:
 * ./gradlew bSPP
 *
 * Scan Results:
 * https://scans.gradle.com/s/ghnyw4vnom4zk
 *
 */
buildScan {
// Uncomment the lines below to agree to the Terms of Service.
    licenseAgreementUrl = "https://gradle.com/terms-of-service"
    licenseAgree = "yes"
//    publishAlways()

//    tag "JBCP Calendar"
    link "BitBucket", "https://bitbucket.org/mickknutson/jbcpcalendar"

    if (System.getenv('CI')) {
        publishAlways()
        tag 'CI'
    }

}

// https://github.com/melix/gradle-buildscan-recipes
/*buildScanRecipes {
  recipes "git-status", "travis-ci", "disk-usage", "gc-stats"
  recipe "git-commit", baseUrl: "https://github.com/ben-manes/caffeine/tree"
}*/





//---------------------------------------------------------------------------//
/**
 * JacocoReport:
 * https://docs.gradle.org/current/userguide/jacoco_plugin.html
 * https://github.com/codecov/example-gradle
 *
 * To run:
 *
 * gradle clean test jacoco
 * gradle clean test jacocoTestReport
 *
 * Can be run on the whole project:
 * gradle check
 * gradle codeCoverageReport
 *
 * Can be run on individual subprojects:
 * gradle jacocoTestReport
 */
task codeCoverageReport(type: JacocoReport) {
    executionData fileTree(project.rootDir.absolutePath).include("**/build/jacoco/*.exec")


    subprojects.each {
        sourceSets it.sourceSets.main
    }

    reports {
        xml {
            enabled = true
            setDestination(file("${buildDir}/reports/jacoco/report.xml"))
        }
        html {
            enabled = false
            setDestination(file("${buildDir}/reports/jacoco/jacocoHtml"))
        }
        csv.enabled false
    }
}

//codeCoverageReport.dependsOn {
//    subprojects*.test
//}

/**
 * https://lkrnac.net/blog/2016/10/aggregate-test-coverage-report/
 */
def publishedProjects = subprojects.findAll()

task codeCoverageReport2(type: JacocoReport, group: "Coverage reports") {
    description = "Generates an aggregate report from all subprojects"

    dependsOn(publishedProjects.test)

    additionalSourceDirs = files(publishedProjects.sourceSets.main.allSource.srcDirs)
    sourceDirectories = files(publishedProjects.sourceSets.main.allSource.srcDirs)
    classDirectories = files(publishedProjects.sourceSets.main.output)
    executionData = files(publishedProjects.jacocoTestReport.executionData)

    doFirst {
        executionData = files(executionData.findAll { it.exists() })
    }

    reports {
        xml {
            enabled = true
            setDestination(file("${project.buildDir}/reports/jacoco/report.xml"))
        }
        html {
            enabled = false
            setDestination(file("${project.buildDir}/reports/jacoco/"))
        }
    }
}

/**
 * https://github.com/ben-manes/caffeine/blob/master/build.gradle
 * https://github.com/kt3k/coveralls-gradle-plugin
 * https://plugins.gradle.org/plugin/com.github.kt3k.coveralls
 *
 * https://coveralls.io/bitbucket/mickknutson/jbcpcalendar
 */
//coveralls {
//    sourceDirs = publishedProjects.sourceSets.main.allSource.srcDirs.flatten()
//    jacocoReportPath = "${buildDir}/reports/jacoco/jacocoRootReport/jacocoRootReport.xml"
//}
//
//tasks.coveralls {
//    dependsOn jacocoRootReport
//}

/**
 * Coveralls.io integration
 * https://coveralls.io/bitbucket/mickknutson/jbcpcalendar
 *
 */
/*
coveralls {
//    sourceDirs = publishedProjects.sourceSets.main.allSource.srcDirs.flatten()
    jacocoReportPath = "${buildDir}/reports/jacoco/report.xml"
}

//tasks.coveralls {
//    dependsOn "check"
//}
*/

//---------------------------------------------------------------------------//
// The End...
//---------------------------------------------------------------------------//
